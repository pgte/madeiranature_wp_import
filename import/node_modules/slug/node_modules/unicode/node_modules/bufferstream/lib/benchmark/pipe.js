(function() {
  var BufferStream, cli, express, fs, path, spawn;
  var __slice = Array.prototype.slice;

  fs = require('fs');

  cli = require('cli');

  path = require('path');

  express = require('express');

  spawn = require('child_process').spawn;

  BufferStream = require('../buffer-stream');

  cli.enable('status');

  cli.setUsage("benchmark [OPTIONS] streamed_filename");

  cli.parse({
    port: ['p', 'Listen on this port', 'number', 3000]
  });

  cli.main(function(args, opts) {
    var filename;
    var _this = this;
    process.on('uncaughtException', function(err) {
      return _this.fatal(err);
    });
    if (args.length !== 1) this.fatal("path to file required!");
    filename = cli.getPath(args[0]);
    return fs.stat(filename, function(err, stats) {
      var server;
      if (err) _this.fatal(err);
      _this.info("serving " + filename + " (" + stats.size + ") …");
      server = express.createServer();
      server.get('/', function(req, res) {
        var buffer, file, info, length, oldpipe, _ref;
        _this.ok("start streaming …");
        res.header('Content-Length', stats.size);
        cli.progress(length = 0);
        buffer = new BufferStream({
          encoding: 'binary',
          size: 'flexible'
        });
        file = spawn('cat', [filename]);
        _this.info("buffer has " + buffer.size + " size.");
        setTimeout(function() {
          _this.info("set buffer size to none");
          return buffer != null ? buffer.setSize('none') : void 0;
        }, 500);
        buffer.on('data', function(chunk) {
          length += chunk.length;
          return cli.progress(length / stats.size);
        });
        _ref = [buffer.pipe, _this.info], oldpipe = _ref[0], info = _ref[1];
        buffer.pipe = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          info("buffer got new sink.");
          return oldpipe.apply(this, args);
        };
        buffer.on('pipe', function() {
          return _this.info("buffer got new source.");
        });
        buffer.on('pause', function() {
          return _this.debug("buffer paused.");
        });
        buffer.on('resume', function() {
          return _this.debug("buffer resumed.");
        });
        buffer.on('end', function() {
          return _this.info("buffer ended.");
        });
        buffer.on('drain', function() {
          return _this.debug("buffer drains.");
        });
        buffer.on('error', function(err) {
          return _this.error("buffer errored: " + err);
        });
        res.on('pause', function() {
          return _this.debug("res paused.");
        });
        res.on('resume', function() {
          return _this.debug("res resumed.");
        });
        res.on('drain', function() {
          return _this.debug("res drains.");
        });
        res.on('end', function() {
          return _this.info("res ended.");
        });
        res.on('error', function(err) {
          return _this.error("res errored: " + err);
        });
        file.stdout.on('pause', function() {
          return _this.debug("file.stdout paused.");
        });
        file.stdout.on('resume', function() {
          return _this.debug("file.stdout resumed.");
        });
        file.stdout.on('drain', function() {
          return _this.debug("file.stdout drains.");
        });
        file.stdout.on('end', function() {
          return _this.debug("file.stdout ended.");
        });
        file.on('exit', function(code) {
          return _this.debug("file.stdout exited with code " + code + ".");
        });
        _this.debug("start piping.");
        buffer.pipe(res);
        return file.stdout.pipe(buffer);
      });
      return server.listen(opts.port, 'localhost', function() {
        _this.ok("server listen on port " + opts.port + " …");
        return _this.info("you can now test it with: wget -Otest http://localhost:" + opts.port + "/");
      });
    });
  });

}).call(this);
